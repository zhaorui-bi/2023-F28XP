#include <IRremote.h>
#include <Servo.h>

IRrecv irrecv_A0(A1);
decode_results results_A0;
long ir_item;
int in1Pin = 2;
int in2Pin = 3;
int in3Pin = 4;
int in4Pin = 5;
int counter = 0;
const int speed = 255;
int leftSpeed=speed-30;
int rightSpeed=speed;
const int servo=9; 
int enablePin1 = 6;
int enablePin2 = 11;
char val;
int inputPin = 13 ; // 超声波接收脚 E
int outputPin = 12; // 超声波发射脚 T
int Fspeedd = 0; // 前方距离
int Rspeedd = 0; // 右方距离
int Lspeedd = 0; // 左方距离
int directionn = 0; // 前=8 后=2 左=4 右=6
Servo myservo; // 舵机对象
int delay_time = 250; // 舵机转向后的稳定时间
int Fgo = 8; // 前进
int Rgo = 6; // 右转
int Lgo = 4; // 左转
int Bgo = 2; // 后退

void setup()
{
  Serial.begin(9600);
  irrecv_A0.enableIRIn();
  pinMode(in1Pin, OUTPUT);
  pinMode(in2Pin, OUTPUT);
  pinMode(in3Pin, OUTPUT);
  pinMode(in4Pin, OUTPUT);
  pinMode(enablePin1, OUTPUT);
  pinMode(enablePin2, OUTPUT);
  pinMode(inputPin, INPUT);  
  pinMode(outputPin, OUTPUT);  
  myservo.attach(servo); 
  Serial.println("-----------------");
}

void loop(){
  myservo.write(90); //舵机回中
  delay(300);
  detection(); //测量距离
  if (directionn == 8) //假如directionn(方向) = 8(前进)
  { 
    advance(0.2); // 正常前进
    Serial.print(" Advance "); //前进
    Serial.print(" ");
  }
  if (directionn == 2) //假如directionn(方向) = 2(后退)
  {       
    back(10); // 后退
    turnL(0.8); //向左偏一点，防止死在里边
    Serial.print(" Reverse "); //
  }
  if (directionn == 6) //假如directionn(方向) = 6(右转)
  { 
    back(2);
    turnL(0.8); // 右转修改左转
  //back(0.5);
    Serial.print(" Right "); 
  }
  if (directionn == 4) //假如directionn(方向) = 4左转
  {
    back(2);
    turnR(0.8); // 左转
  //back(0.5);
    Serial.print(" Left "); 
  } 
  if (irrecv_A0.decode(&results_A0)) {
    ir_item=results_A0.value;
    String type="UNKNOWN";
    String typelist[14]={"UNKNOWN", "NEC", "SONY", "RC5", "RC6", "DISH", "SHARP", "PANASONIC", "JVC", "SANYO", "MITSUBISHI", "SAMSUNG", "LG", "WHYNTER"};
    if(results_A0.decode_type>=1&&results_A0.decode_type<=13){
      type=typelist[results_A0.decode_type];
    }
    Serial.print("IR TYPE:"+type+"  ");
    Serial.println(ir_item,HEX);
    irrecv_A0.resume();
  } else {
    if (ir_item == 0xFF18E7 ) {
      advance(1);
    } else if (ir_item == 0xFF4AB5) {
      back(1);
    } else if (ir_item == 0xFF10EF) {
      turnL(1);
    } else if (ir_item == 0xFF7A85) {
      turnR(1);
    } else if (ir_item == 0xFF38C7) {
      stopp(1);
    }
  }
}

void advance(int a) // 前进
{
  Serial.println("advance");
  leftSpeed=speed;
  rightSpeed=speed;
  analogWrite(enablePin1, rightSpeed);
  digitalWrite(in1Pin, 0);
  digitalWrite(in2Pin, 1);
  analogWrite(enablePin2, leftSpeed);
  digitalWrite(in3Pin, 0);
  digitalWrite(in4Pin, 1);
  delay(a * 100);
}

void back(int g) //后退
{
  Serial.println("back");
  leftSpeed=speed;
  rightSpeed=speed;
  analogWrite(enablePin1, rightSpeed);
  digitalWrite(in1Pin, 1);
  digitalWrite(in2Pin, 0);
  analogWrite(enablePin2, leftSpeed);
  digitalWrite(in3Pin, 1);
  digitalWrite(in4Pin, 0);
  delay(g * 120);
}

void stopp(int f) //停止
{
  Serial.println("stopp");
  leftSpeed=speed;
  rightSpeed=speed;
  analogWrite(enablePin1, rightSpeed);
  digitalWrite(in1Pin, 0);
  digitalWrite(in2Pin, 0);
  analogWrite(enablePin2, leftSpeed);
  digitalWrite(in3Pin, 0);
  digitalWrite(in4Pin, 0);
  delay(f * 100);
}

void right(int b) //右转 单轮
{
  Serial.println("right");
  leftSpeed=speed;
  rightSpeed=0;
  analogWrite(enablePin1, rightSpeed);
  digitalWrite(in1Pin,0);
  digitalWrite(in2Pin, 1);
  analogWrite(enablePin2, leftSpeed);
  digitalWrite(in3Pin, 0);
  digitalWrite(in4Pin, 0);
  delay(b * 100);
}

void left(int c) //左转 单轮
{
  Serial.println("left");
  leftSpeed=0;
  rightSpeed=speed;
  analogWrite(enablePin2, leftSpeed);
  digitalWrite(in1Pin, 0);
  digitalWrite(in2Pin, 1);
  analogWrite(enablePin1, rightSpeed);
  digitalWrite(in3Pin, 0);
  digitalWrite(in4Pin, 0);
  delay(c * 100);
}

void turnR(int d) //右转 双轮
{
  Serial.println("turnR");
  leftSpeed=speed-125;
  rightSpeed=speed-155;
  analogWrite(enablePin1, rightSpeed);
  digitalWrite(in1Pin,1);
  digitalWrite(in2Pin, 0);
  analogWrite(enablePin2, leftSpeed);
  digitalWrite(in3Pin, 0);
  digitalWrite(in4Pin, 1);
  delay(d * 50);
}

void turnL(int e) //左转 双轮
{
  Serial.println("turnL");
  leftSpeed=speed-155;
  rightSpeed=speed-125;
  analogWrite(enablePin1, rightSpeed);
  digitalWrite(in1Pin, 0);
  digitalWrite(in2Pin, 1);
  analogWrite(enablePin2, leftSpeed);
  digitalWrite(in3Pin, 1);
  digitalWrite(in4Pin, 0);
  delay(e * 50);
}

void detection() //测量三个角度(前.左.右)
{
  int delay_time = 250; // 舵机转向后的稳定时间(修改了)
  ask_pin_F(); // 读前方距离
  if (Fspeedd < 45) // 距离小于10公分
  {
    stopp(1); // 
    back(2); // 后退 0.2秒
  }
  if (Fspeedd < 60) // 假如前方距离小于25公分
  {
    stopp(1); // 
    ask_pin_L(); // 读取左方距离
    delay(delay_time); // 等待舵机稳定
    ask_pin_R(); // 读取右方距离
    delay(delay_time); // 等待舵机稳定
    if (Lspeedd > Rspeedd) //假如 左距离大于右距离
    {
      directionn = Lgo; //向左走
    }
    if (Lspeedd <= Rspeedd) //假如 左距离小于等于右距离
    {
      directionn = Rgo; //向右走
    }
    if (Lspeedd < 25 && Rspeedd < 25) //假如 左右距离 都小于15公分
    {
      directionn = Bgo; //后退
    }
  }
  else //加前方大于25公分
  {
    directionn = Fgo; //向前走
  }
}

void ask_pin_F() // 量出前方距离
{
  myservo.write(96);
  digitalWrite(outputPin, LOW); // 
  delayMicroseconds(2);
  digitalWrite(outputPin, HIGH); //超声波发送一个不小于10us的高脉冲
  delayMicroseconds(10);
  digitalWrite(outputPin, LOW); // 
  float Fdistance = pulseIn(inputPin, HIGH); // 读取返回脉冲宽度
  Fdistance = Fdistance / 5.8 / 10; // 时间转成距离 （单位：公分）
  Serial.print("F distance:"); //输出距离
  Serial.println(Fdistance); //
  Fspeedd = Fdistance; // 
}

void ask_pin_L() // 量出左边距离 
{
  myservo.write(160);
  delay(delay_time);
  digitalWrite(outputPin, LOW);   
  delayMicroseconds(2);
  digitalWrite(outputPin, HIGH);   
  delayMicroseconds(10);
  digitalWrite(outputPin, LOW);  
  float Ldistance = pulseIn(inputPin, HIGH);  
  Ldistance = Ldistance / 5.8 / 10; 
  Serial.print("L distance:");  
  Serial.println(Ldistance);  
  Lspeedd = Ldistance;   
}

void ask_pin_R() // 量出右边距离
{
  myservo.write(20);
  delay(delay_time);
  digitalWrite(outputPin, LOW);  
  delayMicroseconds(2);
  digitalWrite(outputPin, HIGH);   
  delayMicroseconds(10);
  digitalWrite(outputPin, LOW);   
  float Rdistance = pulseIn(inputPin, HIGH);   
  Rdistance = Rdistance / 5.8 / 10;   
  Serial.print("R distance:"); 
  Serial.println(Rdistance); 
  Rspeedd = Rdistance;  
}

